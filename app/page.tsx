'use client'

import WebApp from '@twa-dev/sdk'
import { useEffect, useState, useRef } from 'react'
import { useRouter } from 'next/navigation';

// Define the interface for user data
interface UserData {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code: string;
  is_premium?: boolean;
  photo_url?: string; 
  energy: number; 
  level: number; // –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π—Å—Ç–≤–æ level –≤ UserData
  score: number; // –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π—Å—Ç–≤–æ score –≤ UserData
  points?: '10000'; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—á–∫–æ–≤
}


export default function Home() {
  const [userData, setUserData] = useState<UserData | null>(null)
  const [energyLevel, setEnergyLevel] = useState(500) 
  const [level, setLevel] = useState(1) // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è level
  const [isPlaying, setIsPlaying] = useState(false); 
  const [isGameOver, setIsGameOver] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã
  const rocketRef = useRef<HTMLImageElement>(null);
  const [rocketPosition, setRocketPosition] = useState({
    
    x: 0,
    y: 0,
  });
  
  const starsRef = useRef<HTMLDivElement>(null); // –°—Å—ã–ª–∫–∞ –Ω–∞ div —Å –∑–≤–µ–∑–¥–∞–º–∏
 
  const router = useRouter();
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–¥–∞—é—â–∏—Ö –∑–≤–µ–∑–¥
  const createFallingStars = () => {
    if (!starsRef.current) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ starsRef

    const starsContainer = starsRef.current;
    const numStars = 50; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–¥–∞—é—â–∏—Ö –∑–≤–µ–∑–¥

    for (let i = 0; i < numStars; i++) {
      const star = document.createElement('div');
      star.className = 'star'; 

      // –°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞, —Ü–≤–µ—Ç–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
      star.style.width = `${Math.random() * 5 + 2}px`;
      star.style.height = `${Math.random() * 5 + 2}px`;
      star.style.backgroundColor = getRandomColor();
      star.style.animation = `falling-star ${getRandomSpeed()}s linear infinite, blink 1s linear infinite`;

      // –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–∞–¥–µ–Ω–∏—è
      star.style.left = `${Math.random() * 100}%`;
      star.style.top = `${Math.random() * 100}%`; 

      // –£–¥–∞–ª—è–µ–º –∑–≤–µ–∑–¥—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
      star.addEventListener('animationend', () => {
        starsContainer.removeChild(star);
      });

      starsContainer.appendChild(star); 
    }
  };

  const updateRocketPosition = (event: TouchEvent) => {
    if (!rocketRef.current) return;
    const touch = event.touches[0];
    const maxX = window.innerWidth - rocketRef.current.offsetWidth; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    const maxY = window.innerHeight - rocketRef.current.offsetHeight; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    const x = Math.max(0, Math.min(touch.clientX - rocketRef.current.offsetWidth / 2, maxX));
    const y = Math.max(0, Math.min(touch.clientY - rocketRef.current.offsetHeight / 2, maxY));
    setRocketPosition({ x, y });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
  const startGame = () => {
    setIsPlaying(true);
    setIsGameOver(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
  const endGame = () => {
    setIsGameOver(true);
    setIsPlaying(false);
  };

  

  useEffect(() => {
    if (starsRef.current) {
      createFallingStars(); // –°–æ–∑–¥–∞–µ–º –∑–≤–µ–∑–¥—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    }
  }, []);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º setInterval –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–≤–µ–∑–¥
  useEffect(() => {
    const interval = setInterval(() => {
      if (starsRef.current) {
        createFallingStars();
      }
    }, 5000); // –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–≤–µ–∑–¥—ã –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    if (typeof window !== 'undefined' && WebApp.initDataUnsafe.user) {
      const user = WebApp.initDataUnsafe.user as UserData;
      setUserData(user);
      setEnergyLevel(user.energy); 
      setLevel(user.level); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ level
    }
  }, []);
  
  const handleGameClick = () => {
    router.push('/game'); 
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  const preventScroll = (event: React.TouchEvent<HTMLDivElement>) => {
    event.preventDefault(); 
  };

 return (
   <div 
    style={{
      position: 'fixed',
      top: 0,
      left: 0,
      width: '100%',
      height: '100%',
      // –£–¥–∞–ª–∏–ª–∏ backgroundImage: 'url(/image/fonrocket.png)'
      backgroundImage: `linear-gradient(to bottom, #222222, #111111, #222222), 
                        linear-gradient(to right, #222222, #555555, #222222), 
                        linear-gradient(to bottom, transparent, #FF0000, transparent)`, // Red accent at bottom
      backgroundSize: 'cover',
      backgroundAttachment: 'fixed',
      // –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –≥–ª—è–Ω—Ü–∞
      filter: 'brightness(120%) saturate(120%)', //  –ì–ª—è–Ω—Ü 
      pointerEvents: 'none',
      touchAction: 'none' /* Prevent scaling with touch events */
      
    }} 
    onTouchMove={preventScroll} // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  >
    
      <div style={{
      position: 'absolute',
      bottom: '15%',
      left: '50%',
      transform: 'translateX(-50%)',
      width: '90%',
      height: '20%',
      backgroundImage: `url('/image/obloh.png')`,
      backgroundSize: 'cover',
        backgroundAttachment: 'fixed',
      borderRadius: '20px',
      boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    }}>
      <h2 style={{
      position: 'absolute', 
      top: '20px', 
      left: '20px', 
      color: 'white', 
      fontSize: '0.9rem',
      fontFamily: 'Arial, Helvetica, sans-serif', 
        fontWeight: 'bold', // –î–æ–±–∞–≤–ª—è–µ–º bold
    }}> üöÄ Rocket game  </h2>
      <button 
        className="play-button" 
        onClick={handleGameClick}
        style={{ 
          position: 'fixed',
          padding: '5px 17px', /*  –î–æ–±–∞–≤—å—Ç–µ –æ—Ç—Å—Ç—É–ø—ã –∫ –∫–Ω–æ–ø–∫–µ */
          fontSize: '0.9rem', /*  –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ */
          borderRadius: '100px', /*  –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã */
          border: 'none', /*  –£–±–∏—Ä–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É –∫–Ω–æ–ø–∫–∏ */
          backgroundColor: 'white', /*  –ë–µ–ª—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ */
          color: 'white', /*  –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ */
          cursor: 'pointer', /*  –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä —É–∫–∞–∑–∞—Ç–µ–ª—è */
          bottom: '15px',
          right: '15px',
          
        }}
      >
        Play
      </button>
    
      
  
      {/* –†–∞–∫–µ—Ç–∞ —Å–Ω–∏–∑—É –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
    
  </div>
      <main 
        className="main-element p-4 bg-cover bg-center" 
        style={{ 
          minHeight: '100vh',
          perspective: 1000,
          boxShadow: '0px 0px 10px rgba(255, 255, 255, 0.5)' 
        }} 
      >
        <div className="fixed top-10 left-1/2 -translate-x-1/2"> {/* Center the userData container */}
        <div className="flex items-center justify-center h-full"> {/* –û–±—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
          {userData && (
            <div className="flex flex-col items-center justify-center"> {/* Center userData content */}
              <img 
                src="/image/else1.png" 
                alt="Profile Picture" 
                className="w-32 h-32 rounded-full mb-4" 
              />
              <h1 className="text-3xl font-bold text-white"> 
                {userData.username}
              </h1>
              {userData.points !== undefined && ( 
                <p className="text-xl text-white mt-2">–û—á–∫–∏: {userData.points || 0}</p> 
              )}
            </div>
          )}
        </div>
      
      </div>
      {/* ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ... */}
    </main>
  </div>
);
}


function getRandomColor() {
  const colors = ['#007bff', '#fff', '#800080']; // –°–∏–Ω–∏–π, –±–µ–ª—ã–π, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
  return colors[Math.floor(Math.random() * colors.length)];
}
function getRandomSpeed() {
  return Math.random() * 20 + 100; // –°–ª—É—á–∞–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç 5 –¥–æ 10 —Å–µ–∫—É–Ω–¥
}
